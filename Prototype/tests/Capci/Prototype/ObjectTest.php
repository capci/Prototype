<?php
namespace Capci\Prototype;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-11-21 at 16:31:59.
 */
class ObjectTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Object
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        require '../src/Capci/Prototype/autoload.php';
        $this->object = new Object;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Capci\Prototype\Object::hasKey
     */
    public function testHasKey()
    {
        $this->assertFalse($this->object->hasKey('prop1'));
        $this->object->prop1 = 1;
        $this->assertTrue($this->object->hasKey('prop1'));
        $this->object->prop2 = null;
        $this->assertTrue($this->object->hasKey('prop2'));
    }

    /**
     * @covers Capci\Prototype\Object::keys
     */
    public function testKeys()
    {
        $this->assertTrue(empty($this->object->keys()));
        $this->object->prop1 = 1;
        $this->object->prop2 = null;
        $this->assertSame(['prop1', 'prop2'], $this->object->keys());
    }

    /**
     * @covers Capci\Prototype\Object::getIterator
     */
    public function testGetIterator()
    {
        $this->object->prop1 = 1;
        $this->object->prop2 = null;
        $index = 0;
        $expectedKeys = ['prop1', 'prop2'];
        $expectedValues = [1, null];
        foreach ($this->object as $key => $value) {
            $this->assertSame($expectedKeys[$index], $key);
            $this->assertSame($expectedValues[$index], $value);
            $index++;
        }
    }

    /**
     * @covers Capci\Prototype\Object::__set
     */
    public function test__set()
    {
        $this->object->prop1 = 1;
        $this->assertTrue($this->object->hasKey('prop1'));
        $this->object->prop2 = new \stdClass();
        $this->assertTrue($this->object->hasKey('prop2'));
    }

    /**
     * @covers Capci\Prototype\Object::__unset
     */
    public function test__unset()
    {
        $this->object->prop1 = 1;
        $this->assertTrue($this->object->hasKey('prop1'));
        $this->object->prop2 = new \stdClass();
        $this->assertTrue($this->object->hasKey('prop2'));
        unset($this->object->prop1);
        $this->assertFalse($this->object->hasKey('prop1'));
    }

    /**
     * @covers Capci\Prototype\Object::__isset
     */
    public function test__isset()
    {
        $this->assertFalse(isset($this->object->prop1));
        $this->object->prop1 = 1;
        $this->assertTrue(isset($this->object->prop1));
        $this->object->prop2 = null;
        $this->assertFalse(isset($this->object->prop2));
    }

    /**
     * @covers Capci\Prototype\Object::__get
     */
    public function test__get()
    {
        $this->object->prop1 = 1;
        $this->assertSame(1, $this->object->prop1);
        $this->object->prop2 = null;
        $this->assertSame(null, $this->object->prop2);
        
        try {
            $this->object->prop3;
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
    }

    /**
     * @covers Capci\Prototype\Object::offsetSet
     */
    public function testOffsetSet()
    {
        $this->object['prop1'] = 1;
        $this->assertTrue($this->object->hasKey('prop1'));
        $this->object['prop2'] = new \stdClass();
        $this->assertTrue($this->object->hasKey('prop2'));
    }

    /**
     * @covers Capci\Prototype\Object::offsetUnset
     */
    public function testOffsetUnset()
    {
        $this->object->prop1 = 1;
        $this->assertTrue($this->object->hasKey('prop1'));
        $this->object->prop2 = new \stdClass();
        $this->assertTrue($this->object->hasKey('prop2'));
        unset($this->object['prop1']);
        $this->assertFalse($this->object->hasKey('prop1'));
    }

    /**
     * @covers Capci\Prototype\Object::offsetExists
     */
    public function testOffsetExists()
    {
        $this->assertFalse(isset($this->object['prop1']));
        $this->object->prop1 = 1;
        $this->assertTrue(isset($this->object['prop1']));
        $this->object->prop2 = null;
        $this->assertFalse(isset($this->object['prop2']));
    }

    /**
     * @covers Capci\Prototype\Object::offsetGet
     */
    public function testOffsetGet()
    {
        $this->object->prop1 = 1;
        $this->assertSame(1, $this->object['prop1']);
        $this->object->prop2 = null;
        $this->assertSame(null, $this->object['prop2']);
        
        try {
            $this->object['prop3'];
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
    }

    /**
     * @covers Capci\Prototype\Object::count
     */
    public function testCount()
    {
        $this->assertSame(0, count($this->object));
        $this->object->prop1 = 1;
        $this->object->prop2 = null;
        $this->assertSame(2, count($this->object));
    }

    /**
     * @covers Capci\Prototype\Object::__call
     */
    public function test__call()
    {
        $this->object->prop1 = 3;
        $this->object->prop2 = function(int $i, int $j) {
            return $this->prop1 + $i + $j;
        };
        $this->assertSame(9, $this->object->prop2(2, 4));
        
        try {
            $this->object->prop3();
            $this->fail();
        } catch (\BadMethodCallException $ex) {
        }
        
        try {
            $this->object->prop1();
            $this->fail();
        } catch (\BadMethodCallException $ex) {
        }
        
        $this->object->prop4 = function() {
            throw new \Exception();
        };
        try {
            $this->object->prop4();
            $this->fail();
        } catch (\Exception $ex) {
        }
    }

    /**
     * @covers Capci\Prototype\Object::__clone
     */
    public function test__clone()
    {
        $this->object->prop1 = 1;
        $this->object->prop2 = null;
        $stdClass = new \stdClass();
        $this->object->prop3 = $stdClass;
        
        $newObject = clone $this->object;
        
        $this->assertSame(1, $newObject->prop1);
        $this->assertSame(null, $newObject->prop2);
        $this->assertSame($stdClass, $newObject->prop3);
    }
}
